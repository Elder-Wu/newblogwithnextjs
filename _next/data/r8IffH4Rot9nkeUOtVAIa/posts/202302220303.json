{"pageProps":{"postDetail":{"id":"202302220303","contentHtml":"<h1>跨域-CORS头(是否允许跨域站点访问服务器的资源)</h1>\n<pre><code>// 指定允许访问该资源的域名，可以使用通配符 * 表示允许所有域名访问\nAccess-Control-Allow-Origin:'*'\n// 指定允许的方法\nAccess-Control-Allow-Methods:'GET, POST, PUT, DELETE'\n// 指定允许的HTTP头，如Content-Type、Authorization等\nAccess-Control-Allow-Headers:'Content-Type, Authorization'\n</code></pre>\n<p>在客户端发起跨域请求之前，浏览器会发送一个预检请求（OPTIONS请求）到服务器，以确定该服务器是否支持跨域请求。只有在服务器响应预检请求并允许跨域请求时，浏览器才会发送实际的跨域请求。\n实际上，JavaScript本身是没有跨域限制的，跨域限制是由浏览器的安全策略所引入的。浏览器为了保护用户隐私和安全，对跨域资源的访问进行了限制。\n浏览器限制了脚本通过XMLHttpRequest或Fetch API等方式访问来自不同源的资源，这就是所谓的<strong>同源策略</strong>。同源策略的基本原则是：不允许通过脚本访问来自不同源的资源，除非这些资源明确地允许跨域访问。同源策略要求脚本只能与与其来源协议、主机名和端口号相同的文档交互。<br>\n</p>\n<h1>缓存策略</h1>\n<p>当请求资源时，如果本地有缓存，且max-age没有过期，就携带If-Modified-Since头部，发给服务器进行验证。Last-Modified表示文件的修改时间</p>\n<pre><code>Last-Modified: Wed, 24 Feb 2021 08:00:00 GMT\n</code></pre>\n<p>服务器收到请求后，会去查询对应文件的元数据[元数据中保存了文件最后一次被修改的时间]，并与客户端传过来的值进行比较。比较之后会出现两种情况：</p>\n<ul>\n<li>资源没有被修改，服务器会返回304，让客户端加载本地资源\n<pre><code>HTTP/1.1 304 Not Modified\n</code></pre>\n</li>\n<li>如果资源修改了，就返回200，把最新的内容和Last-Modified发给客户端\n<pre><code>HTTP/1.1 200 No Content\nLast-Modified: Wed, 24 Feb 2021 08:00:00 GMT\nCache-Control: max-age=60\n\nbody中包含请求的资源内容\n</code></pre>\n</li>\n</ul>\n<h1>防盗链(服务器可以通过防盗链获得请求来源，从一定程序上避免非法请求)</h1>\n<p>是指在网站A中引用了另一个网站B上的图片、视频、音频等资源，而不是将这些资源下载到自己的网站上并在自己的服务器上进行托管。这种行为会导致网站B的流量被消耗，而网站A则可以免费使用网站B的资源，因此被称为盗链</p>\n<p>配置HTTP响应头部，只允许指定的域名或IP地址访问该资源。可以使用Referer或Origin请求头部来验证请求的来源。</p>\n<h1><code>Accept和</code>和<code>Content-Type</code></h1>\n<p>客户端请求时发送accept类型\nAccept: text/html\n比如这里，就是告诉浏览器，我可以接收<code>text/html</code>类型，如果服务器返回的<code>Content-Type</code>刚好是<code>text/html</code>类型，那么内容会被展示在浏览器内；如果服务器返回的是其他MIME，且携带<code>Disposition</code>头，则会触发下载\n注意：有Disposition=attachment头一定会触发下载，即使accept类型和content-type类型匹配</p>\n","title":"HTTP请求头","date":"2023-02-22 03:03:10","cover":null,"category":["编程"]}},"__N_SSG":true}