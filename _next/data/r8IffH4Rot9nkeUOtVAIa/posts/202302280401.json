{"pageProps":{"postDetail":{"id":"202302280401","contentHtml":"<h1>创建flask应用</h1>\n<pre><code>from flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route('/', methods=[\"GET\"])\ndef index():\n    return \"hello world\"\n\n\nif __name__ == '__main__':\n    app.run()\n</code></pre>\n<h1>启动flask服务器</h1>\n<blockquote>\n<p>gunicorn</p>\n</blockquote>\n<p>Gunicorn（Green Unicorn）是一个基于Python的WSGI HTTP服务器，它能够处理并发连接，支持异步处理请求，通过工作进程池来提高性能，同时还能自动重启工作进程，保证系统稳定性。它是Python Web应用部署的常用工具之一</p>\n<ul>\n<li><code>-b</code> 绑定IP和端口号，如127.0.0.1:5001</li>\n<li><code>--access-logfile</code> 日志</li>\n<li><code>--error-logfile</code> 错误日志</li>\n<li><code>app:app</code> [模块名]:[在python代码中创建的flask实例名]</li>\n</ul>\n<blockquote>\n<p>需要用nohup命令让gunicorn在后台运行</p>\n</blockquote>\n<pre><code># 将nohup的日志和gunicorn的日志全部写到/app/log.txt中\nnohup \\\n    gunicorn -b 127.0.0.1:5001 \\\n    --access-logfile /app/log.txt \\\n    --error-logfile /app/log.txt \\\n    app:app \\\n    >> /app/log.txt 2>&#x26;1 &#x26;\n</code></pre>\n<h1>把以上操作写到Dockerfile中统一管理</h1>\n<pre><code>FROM python:alpine\n\nWORKDIR /app\n\n#把源码拷贝到容器里\nCOPY app.py /app\n\n# 使用pipreqs自动生成requirements.txt\n# --force Overwrite existing requirements.txt\nRUN pip install gunicorn &#x26;&#x26; \\\n    pip install pipreqs &#x26;&#x26; \\\n    pipreqs . --encoding=utf8 --force &#x26;&#x26; \\\n    pip install -r requirements.txt\n\nEXPOSE 5001\n\nCMD [\"nohup\", \"gunicorn\", \"-b\", \"0.0.0.0:5001\",\"--access-logfile\",\"/app/log.txt\",\"--error-logfile\",\"log.txt\", \"app:app\", \">> /app/log.txt 2>&#x26;1\", \"&#x26;\"]\n</code></pre>\n<h1>构建容器并运行容器</h1>\n<pre><code>set -e\n# 删除之前的容器和镜像,还有日志文件\ndocker rm -f api\ndocker rmi -f api\nrm -f log.txt\n\n# 构建容器并创建日志文件进行挂载\ndocker build -t api .\ntouch log.txt\nchmod 777 log.txt\n\n# 启动容器\ndocker run -d \\\n    --name api \\\n    -e TZ=Asia/Shanghai \\\n    -v ${PWD}/log.txt:/app/log.txt \\\n    --restart=always \\\n    -p 5001:5001 \\\n    api\n</code></pre>\n<h1>常见问题</h1>\n<ol>\n<li>挂载文件或挂载目录不存在\n解决办法：创建对应的文件，重新运行</li>\n<li>挂载的文件权限不对\n解决办法：把挂载的文件权限设置为777</li>\n<li>运行报错\n解决办法：用docker logs查看容器日志，或者查看挂载的日志文件</li>\n</ol>\n","title":"在Docker中部署Python-Flask服务器","date":"2023-02-28 04:01:58","cover":null,"category":["编程"]}},"__N_SSG":true}